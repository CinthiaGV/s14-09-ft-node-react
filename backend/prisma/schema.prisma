// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String         @id @default(uuid()) @db.Uuid
  email            String         @unique
  name             String?
  lastName         String?
  username         String         @unique
  age              Int?
  gender           EnumGender?
  password         String
  bio              String?
  image            String?
  hours            EnumHours?
  status           Boolean        @default(false)
  interests        InterestGame[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  requestEmisor    Match[]        @relation("userEmisor")
  requestRecepetor Match[]        @relation("userReceptor")
  messages         Message[]
  conversationsA   Conversation[] @relation("usuarioA")
  conversacionsB   Conversation[] @relation("usuarioB")
}

model InterestGame {
  id           String   @id @default(uuid()) @db.Uuid
  nameGame     String
  categoryGame String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  User         User?    @relation(fields: [userId], references: [id])
  userId       String?  @db.Uuid
}

model Match {
  id             String   @id @default(uuid()) @db.Uuid
  userEmisorId   String   @db.Uuid
  userEmisor     User     @relation(fields: [userEmisorId], references: [id], name: "userEmisor")
  userReceptorId String   @db.Uuid
  userReceptor   User     @relation(fields: [userReceptorId], references: [id], name: "userReceptor")
  status         Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Conversation {
  id        String    @id @default(uuid()) @db.Uuid
  messages  Message[]
  usuarioA  User?     @relation(fields: [userAId], references: [id], name: "usuarioA")
  userAId   String?   @db.Uuid
  usuarioB  User?     @relation(fields: [userBId], references: [id], name: "usuarioB")
  userBId   String?   @db.Uuid
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  status    Boolean   @default(true)
}

model Message {
  id             String        @id @default(uuid()) @db.Uuid
  text           String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  user           User          @relation(fields: [userId], references: [id])
  userId         String        @db.Uuid
  Conversation   Conversation? @relation(fields: [conversationId], references: [id])
  conversationId String?       @db.Uuid
}

enum EnumHours {
  MADRUDAGA
  DIA
  TARDE
  NOCHE
}

enum EnumGender {
  MASCULINO
  FEMENINO
  OTRO
}
